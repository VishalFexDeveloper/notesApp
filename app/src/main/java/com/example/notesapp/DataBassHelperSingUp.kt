package com.example.notesappimport android.annotation.SuppressLintimport android.content.ContentValuesimport android.content.Contextimport android.database.sqlite.SQLiteDatabaseimport android.database.sqlite.SQLiteOpenHelperclass DataBassHelperSingUp(private val context: Context):SQLiteOpenHelper(context, DataBassName,null, VERSION) {    companion object{        private const val DataBassName = "checkUser"        private const val VERSION = 1        private const val COLUMN_ID = "Id"        private const val TABLE_NAME = "allLONG"        private const val COLUMN_USERNAME = "NAME"        private const val COLUMN_NUMBER = "NUMBER"        private const val COlUMN_EMAIL = "EMAIL"        private const val COLUMN_PASSWORD = "PASSWORD"    }    @SuppressLint("SuspiciousIndentation")    override fun onCreate(db: SQLiteDatabase?) {        val createTableQuery = ("CREATE TABLE $TABLE_NAME (" +                "$COLUMN_ID INTEGER PRIMARY KEY," +                "$COLUMN_USERNAME TEXT," +                "$COlUMN_EMAIL TEXT," +                "$COLUMN_NUMBER TEXT," +                "$COLUMN_PASSWORD TEXT)")        db?.execSQL(createTableQuery)    }    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {        val dropTableQuery = "DROP TABLE IF EXISTS $TABLE_NAME"        db?.execSQL(dropTableQuery)        onCreate(db)    }    fun insertNotes(signUp: SingUpModal) {        try {            val db = writableDatabase            val values = ContentValues().apply {                put(COLUMN_ID, signUp.id)                put(COLUMN_USERNAME, signUp.userName)                put(COlUMN_EMAIL, signUp.email)                put(COLUMN_NUMBER, signUp.number)                put(COLUMN_PASSWORD, signUp.password)            }            db.insert(TABLE_NAME, null, values)            db.close()        } catch (e: Exception) {            e.printStackTrace()        }    }    fun checkUserExists(email: String, password: String): Boolean {        var exists = false        try {            val db = readableDatabase            val query = "SELECT * FROM $TABLE_NAME WHERE $COlUMN_EMAIL = ? AND $COLUMN_PASSWORD = ?"            val cursor = db.rawQuery(query, arrayOf(email, password))            exists = cursor.moveToFirst()            cursor.close()            db.close()        } catch (e: Exception) {            e.printStackTrace()        }        return exists    }}