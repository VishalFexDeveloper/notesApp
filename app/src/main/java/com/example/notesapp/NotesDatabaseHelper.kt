package com.example.notesappimport android.annotation.SuppressLintimport android.content.ContentValuesimport android.content.Contextimport android.database.sqlite.SQLiteDatabaseimport android.database.sqlite.SQLiteOpenHelperimport android.graphics.BitmapFactoryimport androidx.core.graphics.drawable.toIconclass NotesDatabaseHelper(val context: Context) :    SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {    companion object {        private const val DATABASE_NAME = "new_database"        private const val DATABASE_VERSION = 1        private const val TABLE_NAME = "allNotes"        private const val COLUMN_ID = "id"        private const val COLUMN_TITLE = "title"        private const val COLUMN_CONTENT = "content"        private const val COLUMN_IMAGE = "Image"    }    override fun onCreate(db: SQLiteDatabase?) {        val createTableQuery = ("CREATE TABLE $TABLE_NAME(" +                "$COLUMN_ID INTEGER PRIMARY KEY," +                "$COLUMN_TITLE TEXT," +                "$COLUMN_CONTENT TEXT," +                "$COLUMN_IMAGE BLOB)")        db?.execSQL(createTableQuery)    }    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {        val dropTableQuery = "DROP TABLE IF EXISTS $TABLE_NAME"        db?.execSQL(dropTableQuery)        onCreate(db)    }    fun insertNotes(note: NotesData) {        try {            val values = ContentValues().apply {                put(COLUMN_TITLE, note.title)                put(COLUMN_CONTENT, note.content)                put(COLUMN_IMAGE, note.img)            }            val db = writableDatabase            db.insert(TABLE_NAME, null, values)            db.close()        } catch (e: Exception) {            e.printStackTrace()        }    }    @SuppressLint("Recycle")    fun getAllNotes(): List<NotesData> {        val notesList = mutableListOf<NotesData>()        val db = readableDatabase        val query = "SELECT * FROM $TABLE_NAME"        val cursor = db.rawQuery(query, null)        while (cursor.moveToNext()) {            val id = cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_ID))            val title = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_TITLE))            val content = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_CONTENT))            val imageByteArray = cursor.getBlob(cursor.getColumnIndexOrThrow(COLUMN_IMAGE))//            val bitmap = BitmapFactory.decodeByteArray(imageByteArray,0,imageByteArray.size)//            val imageInt = bitmap            val note = NotesData(id, title, content, imageByteArray)            notesList.add(note)        }        cursor.close()        db.close()        return notesList    }    fun updateNote(note: NotesData) {        val db = writableDatabase        val values = ContentValues().apply {            put(COLUMN_TITLE, note.title)            put(COLUMN_CONTENT, note.content)            put(COLUMN_IMAGE, note.img)        }        val whereClause = "$COLUMN_ID = ?"        val whereArgs = arrayOf(note.id.toString())        db.update(TABLE_NAME, values, whereClause, whereArgs)        db.close()    }    @SuppressLint("Recycle")    fun getNoteById(noteId: Int): NotesData? {        val db = readableDatabase        val query = "SELECT * FROM $TABLE_NAME WHERE $COLUMN_ID = $noteId"        val cursor = db.rawQuery(query, null)        val note: NotesData? = if (cursor.moveToFirst()) {            val id = cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_ID))            val title = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_TITLE))            val content = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_CONTENT))            val img = cursor.getBlob(cursor.getColumnIndexOrThrow(COLUMN_IMAGE))                        NotesData(id, title, content, img)        } else {            null        }        cursor.close()        db.close()        return note    }    fun deleteNote(noteId: Int) {        val db = writableDatabase        val whereClause = "$COLUMN_ID = ?"        val whereArgs = arrayOf(noteId.toString())        db.delete(TABLE_NAME, whereClause, whereArgs)        db.close()    }}